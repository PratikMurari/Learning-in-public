SECTION 4: YOUR FIRST INTRO TO TYPESCRIPT DOC
=============================================

1) Pace & Learning Style
------------------------
- The instructor starts slow so beginners don’t get lost — speed increases later.
- He emphasizes learning from **official documentation**. Tutorials are great, but docs make you self-sufficient.

💡 Real-world tip: Keep [TypeScript Docs](https://www.typescriptlang.org/docs/) open while coding — they’re well-structured and searchable.

2) What Are “Types” in TypeScript?
----------------------------------
- TypeScript = all about **types**.
- Types describe the shape & kind of data your variables/functions can hold.
- Common **primitive types**:
    - `string`, `number`, `boolean`, `null`, `undefined`
- Other important ones:
    - `void`, `object`, `array`, `tuple`, `any`, `unknown`, `never`
- Don’t over-categorize types into “primitive vs modern” — just think: they’re all tools for describing data.

⚠️ `any` = bypasses type safety. Use only when you truly don’t know a value’s type.
⚡ `unknown` = safer alternative to `any`.
🔥 `never` = for functions that never return (e.g., always throw errors).

3) Exploring the Docs
---------------------
- Go to **Docs → Handbook → Basics → Everyday Types**.
- Skim the page and count how many types you see (strings, arrays, unions, etc.).
- This builds awareness of TS vocabulary.

💡 Real-world tip: Bookmark “Everyday Types” & “Utility Types” — you’ll reference them often.

4) Why Types Matter (Teamwork & Safety)
---------------------------------------
- TS saves you from runtime bugs by validating input/output at compile time.
- Example:
    - JS: You write a function expecting numbers, but someone calls it with a string → bug happens at runtime.
    - TS: You declare `function add(x: number, y: number)` → compiler stops invalid calls early.
- Great for teams: everyone knows what data flows where.

5) First Syntax: Declaring a Variable with a Type
-------------------------------------------------
Basic pattern:
```ts
let variableName: type = value;
